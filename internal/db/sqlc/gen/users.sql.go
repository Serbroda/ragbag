// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"
)

const deleteUserSoft = `-- name: DeleteUserSoft :exec
;

UPDATE users
SET deleted_at = CURRENT_TIMESTAMP
WHERE sid = ?
`

func (q *Queries) DeleteUserSoft(ctx context.Context, sid string) error {
	_, err := q.db.ExecContext(ctx, deleteUserSoft, sid)
	return err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, sid, email, password, created_at, updated_at, deleted_at
FROM users u
WHERE email = ?
  AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Sid,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findUserBySid = `-- name: FindUserBySid :one
;

SELECT id, sid, email, password, created_at, updated_at, deleted_at
FROM users
WHERE sid = ?
  AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) FindUserBySid(ctx context.Context, sid string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserBySid, sid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Sid,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (sid,
                   created_at,
                   updated_at,
                   email,
                   password)
VALUES (?1,
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP,
        ?2,
        ?3) RETURNING id, sid, email, password, created_at, updated_at, deleted_at
`

type InsertUserParams struct {
	Sid      string `db:"sid" json:"sid"`
	Email    string `db:"email" json:"email"`
	Password string `db:"password" json:"-"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.Sid, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Sid,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET password = COALESCE(?2, password)
WHERE sid = ?
  AND deleted_at IS NULL
`

type UpdateUserParams struct {
	Password string `db:"password" json:"-"`
	Sid      string `db:"sid" json:"sid"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Password, arg.Sid)
	return err
}
