// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
;

DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteUserSoft = `-- name: DeleteUserSoft :exec
;

UPDATE users
SET password = COALESCE(?2, name)
WHERE id = ?
  AND deleted_at IS NULL
`

type DeleteUserSoftParams struct {
	Name string `db:"name" json:"-"`
	ID   int64  `db:"id" json:"id"`
}

func (q *Queries) DeleteUserSoft(ctx context.Context, arg DeleteUserSoftParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserSoft, arg.Name, arg.ID)
	return err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, password, created_at, updated_at, deleted_at
FROM users u
WHERE email = ?
  AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
;

SELECT id, email, password, created_at, updated_at, deleted_at
FROM users u
WHERE id = ?
  AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) FindUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (created_at,
                   updated_at,
                   email,
                   password)
VALUES (CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP,
        ?1,
        ?2) RETURNING id, email, password, created_at, updated_at, deleted_at
`

type InsertUserParams struct {
	Email    string `db:"email" json:"email"`
	Password string `db:"password" json:"-"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET password = COALESCE(?2, name)
WHERE id = ?
  AND deleted_at IS NULL
`

type UpdateUserParams struct {
	Name string `db:"name" json:"-"`
	ID   int64  `db:"id" json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Name, arg.ID)
	return err
}
