// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: spaces.sql

package sqlc

import (
	"context"
)

const findSpaceBySid = `-- name: FindSpaceBySid :one
;

SELECT DISTINCT s.id, s.sid, s.owner_id, s.name, s.visibility, s.created_at, s.updated_at, s.deleted_at
FROM spaces s
         LEFT JOIN spaces_users su on
    su.space_id = s.id
WHERE deleted_at IS NULL
  AND sid = ?1
  AND (
    s.owner_id = ?2
        OR su.user_id = ?2
    )
    LIMIT 1
`

type FindSpaceBySidParams struct {
	ID     string `db:"id" json:"id"`
	UserID int64  `db:"user_id" json:"user_id"`
}

func (q *Queries) FindSpaceBySid(ctx context.Context, arg FindSpaceBySidParams) (Space, error) {
	row := q.db.QueryRowContext(ctx, findSpaceBySid, arg.ID, arg.UserID)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.Sid,
		&i.OwnerID,
		&i.Name,
		&i.Visibility,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findSpacesByOwnerId = `-- name: FindSpacesByOwnerId :many
SELECT DISTINCT s.id, s.sid, s.owner_id, s.name, s.visibility, s.created_at, s.updated_at, s.deleted_at
FROM spaces s
         LEFT JOIN spaces_users su on
    su.space_id = s.id
WHERE s.deleted_at IS NULL
  AND (
    s.owner_id = ?1
        OR su.user_id = ?1
    )
`

func (q *Queries) FindSpacesByOwnerId(ctx context.Context, userID int64) ([]Space, error) {
	rows, err := q.db.QueryContext(ctx, findSpacesByOwnerId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Space
	for rows.Next() {
		var i Space
		if err := rows.Scan(
			&i.ID,
			&i.Sid,
			&i.OwnerID,
			&i.Name,
			&i.Visibility,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSpace = `-- name: InsertSpace :one
INSERT INTO spaces (sid,
                    created_at,
                    updated_at,
                    owner_id,
                    name)
VALUES (?1,
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP,
        ?2,
        ?3) RETURNING id, sid, owner_id, name, visibility, created_at, updated_at, deleted_at
`

type InsertSpaceParams struct {
	Sid     string `db:"sid" json:"sid"`
	OwnerID int64  `db:"owner_id" json:"owner_id"`
	Name    string `db:"name" json:"name"`
}

func (q *Queries) InsertSpace(ctx context.Context, arg InsertSpaceParams) (Space, error) {
	row := q.db.QueryRowContext(ctx, insertSpace, arg.Sid, arg.OwnerID, arg.Name)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.Sid,
		&i.OwnerID,
		&i.Name,
		&i.Visibility,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
