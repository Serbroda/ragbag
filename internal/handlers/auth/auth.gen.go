// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package auth

import (
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Email defines model for Email.
type Email = openapi_types.Email

// Error defines model for Error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// Id defines model for Id.
type Id = string

// JWT JSON Web Token
type JWT = string

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email" validate:"required,min=1,max=256"`
	Password string              `json:"password" validate:"required,min=6,max=256"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// AccessToken JSON Web Token
	AccessToken JWT `json:"accessToken"`
}

// RegistrationRequest defines model for RegistrationRequest.
type RegistrationRequest struct {
	Email    Email  `json:"email"`
	Password string `json:"password"`
}

// UserDto defines model for UserDto.
type UserDto struct {
	Email string `json:"email"`
	Id    Id     `json:"id"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// SignUpJSONRequestBody defines body for SignUp for application/json ContentType.
type SignUpJSONRequestBody = RegistrationRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login
	// (POST /auth/login)
	Login(ctx echo.Context) error
	// Refresh token
	// (POST /auth/refresh_token)
	RefreshToken(ctx echo.Context) error
	// Register
	// (POST /auth/signup)
	SignUp(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// RefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RefreshToken(ctx)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/login", wrapper.Login)
	router.POST(baseURL+"/auth/refresh_token", wrapper.RefreshToken)
	router.POST(baseURL+"/auth/signup", wrapper.SignUp)

}
