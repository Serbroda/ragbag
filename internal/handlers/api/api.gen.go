// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BookmarkDto defines model for BookmarkDto.
type BookmarkDto struct {
	Description *string `json:"description,omitempty"`
	Id          Id      `json:"id"`
	Title       *string `json:"title,omitempty"`
	Url         string  `json:"url"`
}

// BookmarkDtoList defines model for BookmarkDtoList.
type BookmarkDtoList = []BookmarkDto

// CollectionDto defines model for CollectionDto.
type CollectionDto struct {
	Id       Id     `json:"id"`
	Name     string `json:"name"`
	ParentId *Id    `json:"parentId,omitempty"`
}

// CollectionDtoList defines model for CollectionDtoList.
type CollectionDtoList = []CollectionDto

// CreateBookmarkDto defines model for CreateBookmarkDto.
type CreateBookmarkDto struct {
	Description *string `json:"description,omitempty"`
	Title       *string `json:"title,omitempty"`
	Url         string  `json:"url"`
}

// CreateCollectionDto defines model for CreateCollectionDto.
type CreateCollectionDto struct {
	Name     string `json:"name"`
	ParentId *Id    `json:"parentId,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// Id defines model for Id.
type Id = string

// SpaceDto defines model for SpaceDto.
type SpaceDto struct {
	Id   Id     `json:"id"`
	Name string `json:"name"`
}

// SpaceDtoList defines model for SpaceDtoList.
type SpaceDtoList = []SpaceDto

// UpdateBookmarkDto defines model for UpdateBookmarkDto.
type UpdateBookmarkDto struct {
	Description *string `json:"description,omitempty"`
	Title       *string `json:"title,omitempty"`
	Url         string  `json:"url"`
}

// UpdateCollectionDto defines model for UpdateCollectionDto.
type UpdateCollectionDto struct {
	Name     string `json:"name"`
	ParentId *Id    `json:"parentId,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound = Error

// CreateCollectionJSONRequestBody defines body for CreateCollection for application/json ContentType.
type CreateCollectionJSONRequestBody = CreateCollectionDto

// UpdateCollectionJSONRequestBody defines body for UpdateCollection for application/json ContentType.
type UpdateCollectionJSONRequestBody = UpdateCollectionDto

// CreateBookmarkJSONRequestBody defines body for CreateBookmark for application/json ContentType.
type CreateBookmarkJSONRequestBody = CreateBookmarkDto

// UpdateBookmarkJSONRequestBody defines body for UpdateBookmark for application/json ContentType.
type UpdateBookmarkJSONRequestBody = UpdateBookmarkDto

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all spaces
	// (GET /spaces)
	GetSpaces(ctx echo.Context) error
	// Get a space
	// (GET /spaces/{spaceId})
	GetSpace(ctx echo.Context, spaceId Id) error
	// Get all collections of a space
	// (GET /spaces/{spaceId}/collections)
	GetCollections(ctx echo.Context, spaceId Id) error
	// Create a collection
	// (POST /spaces/{spaceId}/collections)
	CreateCollection(ctx echo.Context, spaceId Id) error
	// Delete a collection
	// (DELETE /spaces/{spaceId}/collections/{collectionId})
	DeleteCollection(ctx echo.Context, spaceId Id, collectionId Id) error
	// Get a collection
	// (GET /spaces/{spaceId}/collections/{collectionId})
	GetCollection(ctx echo.Context, spaceId Id, collectionId Id) error
	// Update a collection
	// (PUT /spaces/{spaceId}/collections/{collectionId})
	UpdateCollection(ctx echo.Context, spaceId Id, collectionId Id) error
	// Get all bookmarks of a collection
	// (GET /spaces/{spaceId}/collections/{collectionId}/bookmarks)
	GetBookmarks(ctx echo.Context, spaceId Id, collectionId Id) error
	// Create a bookmark
	// (POST /spaces/{spaceId}/collections/{collectionId}/bookmarks)
	CreateBookmark(ctx echo.Context, spaceId Id, collectionId Id) error
	// Delete a bookmark
	// (DELETE /spaces/{spaceId}/collections/{collectionId}/bookmarks/{bookmarkId})
	DeleteBookmark(ctx echo.Context, spaceId Id, collectionId Id, bookmarkId Id) error
	// Get a bookmark
	// (GET /spaces/{spaceId}/collections/{collectionId}/bookmarks/{bookmarkId})
	GetBookmark(ctx echo.Context, spaceId Id, collectionId Id, bookmarkId Id) error
	// Update a bookmark
	// (PUT /spaces/{spaceId}/collections/{collectionId}/bookmarks/{bookmarkId})
	UpdateBookmark(ctx echo.Context, spaceId Id, collectionId Id, bookmarkId Id) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSpaces converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpaces(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSpaces(ctx)
	return err
}

// GetSpace converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpace(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId Id

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", ctx.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSpace(ctx, spaceId)
	return err
}

// GetCollections converts echo context to params.
func (w *ServerInterfaceWrapper) GetCollections(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId Id

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", ctx.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCollections(ctx, spaceId)
	return err
}

// CreateCollection converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCollection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId Id

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", ctx.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCollection(ctx, spaceId)
	return err
}

// DeleteCollection converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCollection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId Id

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", ctx.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	// ------------- Path parameter "collectionId" -------------
	var collectionId Id

	err = runtime.BindStyledParameterWithOptions("simple", "collectionId", ctx.Param("collectionId"), &collectionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collectionId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCollection(ctx, spaceId, collectionId)
	return err
}

// GetCollection converts echo context to params.
func (w *ServerInterfaceWrapper) GetCollection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId Id

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", ctx.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	// ------------- Path parameter "collectionId" -------------
	var collectionId Id

	err = runtime.BindStyledParameterWithOptions("simple", "collectionId", ctx.Param("collectionId"), &collectionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collectionId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCollection(ctx, spaceId, collectionId)
	return err
}

// UpdateCollection converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCollection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId Id

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", ctx.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	// ------------- Path parameter "collectionId" -------------
	var collectionId Id

	err = runtime.BindStyledParameterWithOptions("simple", "collectionId", ctx.Param("collectionId"), &collectionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collectionId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCollection(ctx, spaceId, collectionId)
	return err
}

// GetBookmarks converts echo context to params.
func (w *ServerInterfaceWrapper) GetBookmarks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId Id

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", ctx.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	// ------------- Path parameter "collectionId" -------------
	var collectionId Id

	err = runtime.BindStyledParameterWithOptions("simple", "collectionId", ctx.Param("collectionId"), &collectionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collectionId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBookmarks(ctx, spaceId, collectionId)
	return err
}

// CreateBookmark converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBookmark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId Id

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", ctx.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	// ------------- Path parameter "collectionId" -------------
	var collectionId Id

	err = runtime.BindStyledParameterWithOptions("simple", "collectionId", ctx.Param("collectionId"), &collectionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collectionId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateBookmark(ctx, spaceId, collectionId)
	return err
}

// DeleteBookmark converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBookmark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId Id

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", ctx.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	// ------------- Path parameter "collectionId" -------------
	var collectionId Id

	err = runtime.BindStyledParameterWithOptions("simple", "collectionId", ctx.Param("collectionId"), &collectionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collectionId: %s", err))
	}

	// ------------- Path parameter "bookmarkId" -------------
	var bookmarkId Id

	err = runtime.BindStyledParameterWithOptions("simple", "bookmarkId", ctx.Param("bookmarkId"), &bookmarkId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bookmarkId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteBookmark(ctx, spaceId, collectionId, bookmarkId)
	return err
}

// GetBookmark converts echo context to params.
func (w *ServerInterfaceWrapper) GetBookmark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId Id

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", ctx.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	// ------------- Path parameter "collectionId" -------------
	var collectionId Id

	err = runtime.BindStyledParameterWithOptions("simple", "collectionId", ctx.Param("collectionId"), &collectionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collectionId: %s", err))
	}

	// ------------- Path parameter "bookmarkId" -------------
	var bookmarkId Id

	err = runtime.BindStyledParameterWithOptions("simple", "bookmarkId", ctx.Param("bookmarkId"), &bookmarkId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bookmarkId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBookmark(ctx, spaceId, collectionId, bookmarkId)
	return err
}

// UpdateBookmark converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateBookmark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId Id

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", ctx.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	// ------------- Path parameter "collectionId" -------------
	var collectionId Id

	err = runtime.BindStyledParameterWithOptions("simple", "collectionId", ctx.Param("collectionId"), &collectionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter collectionId: %s", err))
	}

	// ------------- Path parameter "bookmarkId" -------------
	var bookmarkId Id

	err = runtime.BindStyledParameterWithOptions("simple", "bookmarkId", ctx.Param("bookmarkId"), &bookmarkId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bookmarkId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateBookmark(ctx, spaceId, collectionId, bookmarkId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/spaces", wrapper.GetSpaces)
	router.GET(baseURL+"/spaces/:spaceId", wrapper.GetSpace)
	router.GET(baseURL+"/spaces/:spaceId/collections", wrapper.GetCollections)
	router.POST(baseURL+"/spaces/:spaceId/collections", wrapper.CreateCollection)
	router.DELETE(baseURL+"/spaces/:spaceId/collections/:collectionId", wrapper.DeleteCollection)
	router.GET(baseURL+"/spaces/:spaceId/collections/:collectionId", wrapper.GetCollection)
	router.PUT(baseURL+"/spaces/:spaceId/collections/:collectionId", wrapper.UpdateCollection)
	router.GET(baseURL+"/spaces/:spaceId/collections/:collectionId/bookmarks", wrapper.GetBookmarks)
	router.POST(baseURL+"/spaces/:spaceId/collections/:collectionId/bookmarks", wrapper.CreateBookmark)
	router.DELETE(baseURL+"/spaces/:spaceId/collections/:collectionId/bookmarks/:bookmarkId", wrapper.DeleteBookmark)
	router.GET(baseURL+"/spaces/:spaceId/collections/:collectionId/bookmarks/:bookmarkId", wrapper.GetBookmark)
	router.PUT(baseURL+"/spaces/:spaceId/collections/:collectionId/bookmarks/:bookmarkId", wrapper.UpdateBookmark)

}
